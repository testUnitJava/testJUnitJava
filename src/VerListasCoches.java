
import java.awt.event.KeyEvent;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.io.ObjectInputStream;
import java.io.*;
import java.text.DateFormat;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.GregorianCalendar;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.table.DefaultTableModel;
import javax.swing.JOptionPane;

public class VerListasCoches extends javax.swing.JFrame {

    public VerListasCoches() {
        initComponents();
        iniciarTabla();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        tabladecoches = new javax.swing.JTable();
        volver = new javax.swing.JButton();
        buscarpormatricula = new javax.swing.JTextField();
        botonbuscarespecifico = new javax.swing.JButton();
        botonvertodo = new javax.swing.JButton();
        retirarcoche = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        borde = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Retirar coche");
        setResizable(false);
        getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        tabladecoches.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Matricula", "Abono", "Doble", "Ancho"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }
        });
        jScrollPane1.setViewportView(tabladecoches);

        getContentPane().add(jScrollPane1, new org.netbeans.lib.awtextra.AbsoluteConstraints(19, 115, 678, 310));

        volver.setText("VOLVER");
        volver.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                volverActionPerformed(evt);
            }
        });
        getContentPane().add(volver, new org.netbeans.lib.awtextra.AbsoluteConstraints(580, 443, 117, 40));

        buscarpormatricula.setText("Introduce matricula...");
        buscarpormatricula.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                buscarpormatriculaMouseClicked(evt);
            }
        });
        buscarpormatricula.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                buscarpormatriculaKeyPressed(evt);
            }
        });
        getContentPane().add(buscarpormatricula, new org.netbeans.lib.awtextra.AbsoluteConstraints(19, 70, 170, -1));

        botonbuscarespecifico.setText("BUSCAR ESPECIFICO");
        botonbuscarespecifico.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botonbuscarespecificoActionPerformed(evt);
            }
        });
        getContentPane().add(botonbuscarespecifico, new org.netbeans.lib.awtextra.AbsoluteConstraints(207, 63, 170, 34));

        botonvertodo.setText("ACTUALIZAR TODO");
        botonvertodo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botonvertodoActionPerformed(evt);
            }
        });
        getContentPane().add(botonvertodo, new org.netbeans.lib.awtextra.AbsoluteConstraints(528, 63, 169, 34));

        retirarcoche.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        retirarcoche.setText("RETIRAR SELECCIONADO");
        retirarcoche.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                retirarcocheActionPerformed(evt);
            }
        });
        getContentPane().add(retirarcoche, new org.netbeans.lib.awtextra.AbsoluteConstraints(19, 443, 289, -1));

        jLabel1.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(255, 255, 255));
        jLabel1.setText(" -------- = Disponible desde  camiones");
        getContentPane().add(jLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 480, 280, 39));

        borde.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imagenes/fondoretirar.jpg"))); // NOI18N
        borde.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        getContentPane().add(borde, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 720, 530));

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void volverActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_volverActionPerformed
        this.setVisible(false);
        TipoVehiculoRetirar tipo = new TipoVehiculoRetirar();
        tipo.setVisible(true);
    }//GEN-LAST:event_volverActionPerformed

    private void buscarpormatriculaMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_buscarpormatriculaMouseClicked
        buscarpormatricula.setText("");
    }//GEN-LAST:event_buscarpormatriculaMouseClicked

    private void botonvertodoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botonvertodoActionPerformed
        iniciarTabla();
    }//GEN-LAST:event_botonvertodoActionPerformed

    private void botonbuscarespecificoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botonbuscarespecificoActionPerformed
        Aparcamiento parking = leerBaseDatos();
        iniciarTabla();// Si vuelvo a buscar reinicio todo para empezar
        int y = 0;
        GregorianCalendar actual = new GregorianCalendar();
        if (!buscarpormatricula.getText().isEmpty() && !buscarpormatricula.getText().equals("Introduce matricula...") && !buscarpormatricula.getText().equals("--------")) {
            String valor = buscarpormatricula.getText().toUpperCase();
            buscarpormatricula.setText(valor);
            for (int x = 0; x < parking.parking.size(); x++) {
                if (tabladecoches.getValueAt(x, 0).equals(valor)) {
                    cambiarModeloTabla(1);
                    tabladecoches.setValueAt(parking.parking.get(valor).getMatricula(), 0, 0);
                    tabladecoches.setValueAt(parking.parking.get(valor).siono(), 0, 1);
                    tabladecoches.setValueAt(parking.parking.get(valor).anchoOruedas(), 0, 2);
                    tabladecoches.setValueAt(parking.parking.get(valor).alto(), 0, 3);
                    tabladecoches.setValueAt(parking.parking.get(valor).getFecha(), y, 4);
                    long minutos = (actual.getTimeInMillis() - parking.parking.get(valor).getMinutos()) / (60 * 1000);
                    tabladecoches.setValueAt(String.valueOf(minutos), y, 5);

                    y++;
                    break;
                }
                if (x == parking.parking.size() - 1 && y == 0) {
                    JOptionPane.showMessageDialog(this, "Ningun valor encontrado para matricula especificada");
                }
            }
        } else {
            JOptionPane.showMessageDialog(this, "Introduce matricula");
        }
    }//GEN-LAST:event_botonbuscarespecificoActionPerformed

    private void retirarcocheActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_retirarcocheActionPerformed
        int contador = 0;// Evitar doble mensaje.
        if (tabladecoches.getSelectedRowCount() == 1) { // Para que no haga nada sino se ha seleccionado ninguno o mas de uno
            Aparcamiento parking = leerBaseDatos();
            if (tabladecoches.getRowCount() > 1) { // Si estamos viendo todos 
                String valor = tabladecoches.getValueAt(tabladecoches.getSelectedRow(), 0).toString(); // En la columna cero estan las matriculas
                String parking1[] = new String[parking.parking.size()];
                int x = 1;
                while (x == 1) {
                    x = 0;
                    for (String key : parking.parking.keySet()) { // Obtengo todas las llaves y las almaceno en un vector
                        parking1[x] = (key);
                        x++;
                    }
                }
                for (int i = 0; i < parking.parking.size(); i++) {
                    if (parking.parking.get(parking1[i]).getMatricula().equals(valor)) {
                        Vehiculo v = parking.parking.get(parking1[i]);// Para obtener factura
                        crearFactura(v);// Creamos mediante metodo creado con el objeto retirado
                        String total = parking.sacarVehÃ­culo(valor);
                        JOptionPane.showMessageDialog(this, "Vehiculo retirado " + total);
                        JOptionPane.showMessageDialog(this, "Factura creada en carpeta de proyecto");
                        guardarBaseDatos(parking);
                        iniciarTabla();
                    }
                }
            } else {//Si estamos viendo 1 especifico
                String valor = tabladecoches.getValueAt(tabladecoches.getSelectedRow(), 0).toString();
                String parking1[] = new String[1];
                Vehiculo v = parking.parking.get(valor);// Para obtener factura
                crearFactura(v);// Creamos mediante metodo creado con el objeto retirado
                String total = parking.sacarVehÃ­culo(valor);
                JOptionPane.showMessageDialog(this, "Vehiculo retirado " + total);
                JOptionPane.showMessageDialog(this, "Factura creada en carpeta de proyecto");
                guardarBaseDatos(parking);
                iniciarTabla();
            }
        } else {
            JOptionPane.showMessageDialog(this, "Seleccione UN vehiculo a retirar");
            contador++;
        }
        //if (tabladecoches.getValueAt(tabladecoches.getSelectedRow(), 0).equals("--------") && contador == 0) {
        //JOptionPane.showMessageDialog(this, "Valor solo disponible desde camiones");
        // }
    }//GEN-LAST:event_retirarcocheActionPerformed

    private void buscarpormatriculaKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_buscarpormatriculaKeyPressed
        if (evt.getKeyCode() == KeyEvent.VK_ENTER) {
            botonbuscarespecificoActionPerformed(null);
        }
    }//GEN-LAST:event_buscarpormatriculaKeyPressed
    public void iniciarTabla() {
        Aparcamiento aparcamiento = leerBaseDatos();
        String parking1[] = new String[aparcamiento.parking.size()];
        int x = 1;
        while (x == 1) {
            x = 0;
            for (String key : aparcamiento.parking.keySet()) { // Obtengo todas las llaves y las almaceno en un vector
                parking1[x] = (key);
                x++;
            }
        }

        cambiarModeloTabla(aparcamiento.parking.size());
        GregorianCalendar actual = new GregorianCalendar();// Para obtener la fecha del momento
        for (int y = 0; y < aparcamiento.parking.size(); y++) {
            if (aparcamiento.parking.get(parking1[y]).getIdentificador() == 0) {// Si es cero significa que es coche

                tabladecoches.setValueAt(aparcamiento.parking.get(parking1[y]).getMatricula(), y, 0);
                tabladecoches.setValueAt(aparcamiento.parking.get(parking1[y]).siono(), y, 1);
                tabladecoches.setValueAt(aparcamiento.parking.get(parking1[y]).anchoOruedas(), y, 2);
                tabladecoches.setValueAt(aparcamiento.parking.get(parking1[y]).alto(), y, 3);
                tabladecoches.setValueAt(aparcamiento.parking.get(parking1[y]).getFecha(), y, 4);
                long minutos = (actual.getTimeInMillis() - aparcamiento.parking.get(parking1[y]).getMinutos()) / (60 * 1000);
                tabladecoches.setValueAt(String.valueOf(minutos), y, 5);
            } else {
                tabladecoches.setValueAt("", y, 0);
                tabladecoches.setValueAt("", y, 1);
                tabladecoches.setValueAt("", y, 2);
                tabladecoches.setValueAt("", y, 3);
                tabladecoches.setValueAt("", y, 4);
                tabladecoches.setValueAt("", y, 5);
            }

        }
        int vacios = 0;
        for (int y = 0; y < aparcamiento.parking.size(); y++) {
            if (tabladecoches.getValueAt(y, 0).equals("") && tabladecoches.getValueAt(y, 1).equals("") && tabladecoches.getValueAt(y, 2).equals("") && tabladecoches.getValueAt(y, 3).equals("")) {
                vacios += 1;
                tabladecoches.setValueAt("--------", y, 0);
                tabladecoches.setValueAt("--------", y, 1);
                tabladecoches.setValueAt("--------", y, 2);
                tabladecoches.setValueAt("--------", y, 3);
                tabladecoches.setValueAt("          --------", y, 4);
                tabladecoches.setValueAt("--------", y, 5);
            }
        }

    }

    private void cambiarModeloTabla(int tamaÃ±oTabla) {
        DefaultTableModel md = new DefaultTableModel();
        Object[] fila1 = {"Matricula", "Descuento", "Ancho", "Alto", "Fecha de entrada", "Minutos Totales"};
        md.setRowCount(tamaÃ±oTabla);
        md.setColumnCount(6);
        md.setColumnIdentifiers(fila1);
        tabladecoches.setModel(md);
    }

    private Aparcamiento leerBaseDatos() {
        Aparcamiento parking = null;
        FileInputStream fisPer = null;
        try {
            fisPer = new FileInputStream("misdatos.dat");
        } catch (FileNotFoundException ex) {
            Logger.getLogger(VerListasCoches.class.getName()).log(Level.SEVERE, null, ex);
        }
        try {
            ObjectInputStream oisPer = new ObjectInputStream(fisPer);
            try {
                parking = (Aparcamiento) oisPer.readObject();
            } catch (ClassNotFoundException ex) {
                Logger.getLogger(VerListasCoches.class.getName()).log(Level.SEVERE, null, ex);
            }
        } catch (IOException ex) {
            Logger.getLogger(VerListasCoches.class.getName()).log(Level.SEVERE, null, ex);
        }
        return parking;
    }

    private void guardarBaseDatos(Aparcamiento parking) {
        FileOutputStream guardar = null;
        try {
            guardar = new FileOutputStream("misdatos.dat");
        } catch (FileNotFoundException ex) {
            Logger.getLogger(LlenarDatosCamion.class.getName()).log(Level.SEVERE, null, ex);
        }
        try {
            ObjectOutputStream guardar1 = new ObjectOutputStream(guardar);
            guardar1.writeObject(parking);
            guardar1.close();
        } catch (IOException ex) {
            Logger.getLogger(LlenarDatosCamion.class.getName()).log(Level.SEVERE, null, ex);
        }

    }

    public void crearFactura(Vehiculo v) {
        String introduccion = "FACTURA VEHICULO RETIRADO";
        String matricula = "NUMERO DE MATRICULA: " + v.getMatricula();
        String identificador="";
        if(v.getIdentificador()==0){
            identificador="TIPO DE VEHICULO: Coche";
        }else{
            identificador="TIPO DE VEHICULO: CamiÃ³n";
        }
        String fechaEntrada = "FECHA Y HORA DE ENTRADA: " + v.getFecha();
        GregorianCalendar fsalida = new GregorianCalendar();
        Date fecha1 = fsalida.getTime();
        String fechaSalida = "FECHA Y HORA DE SALIDA: " + fecha1.toLocaleString();
        long minutos = (fsalida.getTimeInMillis() - v.getMinutos()) / (60 * 1000);
        String minutos1 = "MINUTOS TRANSCURRIDOS DESDE ENTRADA: " + minutos;
        String descuento = "DESCUENTO POR ABONO(40%): " + v.siono();
        double importeTotal = v.calcularImporte(minutos);
        String importeTotal1 = "IMPORTE TOTAL A PAGAR: " + importeTotal+" euros";
        DateFormat dateFormat = new SimpleDateFormat("dd-MM-yyyy");
        String nombreFactura = v.getMatricula()+" "+dateFormat.format(fecha1);
        try {
            BufferedWriter bw = new BufferedWriter(new FileWriter(nombreFactura + ".txt"));
            bw.write(introduccion);
            bw.newLine();
            bw.write(matricula);
            bw.newLine();
            bw.write(identificador);
            bw.newLine();
            bw.write(fechaEntrada);
            bw.newLine();
            bw.write(fechaSalida);
            bw.newLine();
            bw.write(minutos1);
            bw.newLine();
            bw.write(descuento);
            bw.newLine();
            bw.write(importeTotal1);
            bw.flush();
            //Cerramos el stream
            bw.close();
        } catch (IOException ioe) {
            System.out.println("Error IO: " + ioe.toString());
        }

    }

    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(VerListasCoches.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(VerListasCoches.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(VerListasCoches.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(VerListasCoches.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new VerListasCoches().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel borde;
    private javax.swing.JButton botonbuscarespecifico;
    private javax.swing.JButton botonvertodo;
    private javax.swing.JTextField buscarpormatricula;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JButton retirarcoche;
    private javax.swing.JTable tabladecoches;
    private javax.swing.JButton volver;
    // End of variables declaration//GEN-END:variables
}
